//database
const { 
fs,
path,
texpro1,
express,
axios,
TelegraPh
} = require("../modulos.js")
 
const { newuser, newgold, saldo, menosgold, totalapis, totaluser, userExists, saveDatabase } = require('../database/database.js');
const user = userExists
var router = express.Router();
__path = process.cwd()



//mensaje predeterminado
const creador = "ANDRES-VPN"

var estado = {
    402: {
    creador: creador,
    error: "402",
    mensage: "digite el parametro [apikey]"
  },
    403: {
      creador: creador,
      error: "403",
      mensage: "usuario no existe",
      contacto: "wa.me/573043603261" ,
    },
    405: {
      creador: creador,
      error: "405",
      mensage: "limite superado",
      contacto: "wa.me/573043603261" ,
    },
    500: {
    creador: creador,
    error: "500",
    mensage: "error interno en el servidor",
    contacto: "wa.me/573043603261" ,
    }
}///respuestas


////guardar img con agente 

const imgtext = async (urlv2) => {
  var imagePath = '../temp/textpro.jpg';
  
  return new Promise((resolve, reject) => {
    axios({
      method: 'get',
      url: urlv2,
      responseType: 'stream',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
      }
    })
    .then(response => {
      response.data.pipe(fs.createWriteStream(imagePath))
        .on('finish', () => {
          TelegraPh(imagePath)
            .then(reupload => {
              resolve(reupload);
            })
            .catch(err => {
              reject(err);
            });
        })
        .on('error', (err) => {
          console.error('Error al guardar la imagen:', err);
          reject(err);
        });
    })
    .catch(error => {
      console.error('Error al descargar la imagen:', error);
      reject(error);
    });
  });
};
///router 

router.get('/limite-apikey', async (req, res, next) => {
try{
  var apikey = req.query.apikey;
  if(!apikey) throw res.json(estado[402])
  if(user(apikey)){
    var apikey = apikey
    var limit = saldo(apikey)
    var total_search_apikey = totalapis(apikey)
    var total_search_users = totaluser()
    res.json({
      creador: creador,
      stado: true,
      result: {
        apikey: apikey,
        limite: limit,
        total_search_apikey,
        total_search_users
      }
    })
  } else {
    res.json(estado[403])
  }
  } catch (e) {
  res.json(estado[500]);
    console.log(e)
  }
})

router.get('/movies', async (req, res, next) => {
try {
  var apikey = req.query.apikey;
  if (!apikey) return res.json(estado[402])
  if (user(apikey)) {
    if(saldo(apikey) >= 1){
      menosgold(apikey, 1)

    var result = JSON.parse(fs.readFileSync("./json/movies.json"))
            res.json({
          creador: creador,
          estado: true,
          total_movies: result.length,
          result,
        })
      } else {
        res.json(estado[405])
      }
  } else {
  res.json(estado[403])
  }
        } catch (e) {
    res.json(estado[500]);
    console.log(e)
    }
})
 
 
router.get('/pokemon', async (req, res, next) => {
try {
  var apikey = req.query.apikey;
  if (!apikey) return res.json(estado[402])
  if (user(apikey)) {
    if(saldo(apikey) >= 1){
      menosgold(apikey, 1)
    var ala = [
      "Pokémon tiene apoyo y aprobación por parte del Vaticano",
      "Pikachu ocupó el segundo lugar en la lista “The Best People of 1999",
      "La evolución de Magikarp está basada en una leyenda china",
      "Los entrenadores Pareja Joven usan Pokémon que se complementan entre ellos",
      "Poliwhirl es el Pokémon favorito de Satoshi Tajiri", " Las películas de Pokémon siempre se estrenan en julio",
      "Las cartas de Pokémon fueron prohibidas en Arabia Saudí",
      "Los Pokémon son una clase de criaturas inspiradas en animales reales, insectos, objetos, plantas o criaturas mitológicas.",
      "Al inicio eran 150 criaturas y hoy son más de 700.",
      "Pokémon tiene el acento en la sílaba “ké”, aunque muchos lo pronuncian en la sílaba “mon”.",
      "La Pokédex es una enciclopedia electrónica portátil que sirve para registrar automáticamente las fichas de todas las diversas especies Pokémon vistas y capturadas durante el viaje como entrenadores.",
      "En la etapa inicial del concepto su nombre era “Capsule Monster“",
      " Existe un avión Boeing 747 japonés decorado con dibujos de Pokémon.",
      "Un grupo de investigadores de la universidad de Osaka descubrió una proteína que sirve para transmitir la información visual al cerebro de manera más rápida y fue nombrada “Pikachurina” por la agilidad del pokémon Pikachu.",
      "El objetivo final del juego es llegar a ganar la Liga Pokémon y convertirse en el campeón regional",
      "Las evoluciones de los pokémon son transformaciones que cambian y/o mejoran algunas de sus habilidades y características.",
      "La evolución es irreversible, es decir, que el Pokémon evolucionado nunca podrá volver a su etapa anterior.",
      "Los entrenadores reciben un pokémon inicial o principiante para poder comenzar con su trayecto en el juego como regalo por parte del “profesor local”",
      "existe un debate en torno a cuál es el pokémon más poderoso, muchos consideran que es Arceus, el dios Pokémon.",
      "Aunque la mayoría de los Pokémon tienen al menos una evolución disponible, también existen Pokémon sin cadena evolutiva."
    ]
    var result = JSON.parse(fs.readFileSync("./json/pokemon.json"))
    var info = ala[Math.floor(Math.random() * ala.length)];
        res.json({
          creador: creador,
          estado: true,
          audio: 'https://www.cjoint.com/doc/23_08/MHvaeHOsk4I_ttsmaker-file-2023-8-20-18-24-49.mp3',
          audiobr: 'https://www.cjoint.com/doc/23_08/MHvaoFCDzLI_ttsmaker-file-2023-8-20-19-6-5.mp3',
          info,
          result,
        })
      } else {
        res.json(estado[405])
      }
  } else {
  res.json(estado[403])
  }
        } catch (e) {
    res.json(estado[500]);
    console.log(e)
    }
})
 



////
module.exports = router
/////
const watchFileAndUpdate = (filename) => {
let file = require.resolve(filename);
fs.watchFile(file, () => {
fs.unwatchFile(file);
console.log(`Archivo atualizado: ${filename}`);
delete require.cache[file];
require(file)})};

watchFileAndUpdate(__filename);